# Fig pre block. Keep at the top of this file.
[[ -f "$HOME/.fig/shell/zshrc.pre.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.pre.zsh"
#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# bindkey
bindkey -e

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'

## Use rg and bat when CTRL_T
# export FZF_CTRL_T_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
export FZF_CTRL_T_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*" --glob "!node_modules/*" --glob "!vendor/*" 2> /dev/null'
export FZF_CTRL_T_OPTS='--preview "bat  --color=always --style=header,grid --line-range :100 {}"'

# enhancd
export ENHANCD_FILTER=fzf
export ENHANCD_HOOK_AFTER_CD="ls -al"

# History
export HISTSIZE=10000
export SAVEHIST=1000000
setopt hist_ignore_dups
setopt hist_ignore_all_dups

# pyenv
export PYENV_ROOT="${HOME}/.pyenv"
export PATH="${PYENV_ROOT}/bin:$PATH"
eval "$(pyenv init -)"

# cisco anyconnect
export PATH="/opt/cisco/anyconnect/bin:$PATH"
alias vpn-d="vpn disconnect"

vpn() (
  # エラー対応
  set -eu

  # パラメータの設定
  export VPN_HOST='ssl-vpn.dmm-is.com'
  export VPN_GROUP=${VPN_GROUP:=0}
  # export VPN_GROUP='DMM'
  export VPN_USERNAME='mizuno-hiroaki@dmm.local'
  export VPN_PASSWORD_KEYNAME='DMM_VPN_Password'
  export VPN_SECOND_USERNAME='mizuno-hiroaki'
  export VPN_TOTP_SECRET_KEYNAME='DMM_VPN_secret'

  # "vpn" "vpn connect" 以外の呼び出しは元のコマンドに流す
  if [[ "$#" -ne 0 && ( "$#" -ne 1 || "$1" != 'connect' ) ]]; then
    exec command vpn "$@"
  fi

  # GUI 版が起動していたら一度強制終了する
  killall 'Cisco AnyConnect Secure Mobility Client' >/dev/null 2>&1 || :

  # 既に VPN に接続していたら強制切断する
  expect -c '
    set log_user 0
    set timeout 5
    spawn vpn disconnect
    expect ">> state: Disconnected"
    interact
  '

  # キーチェーンからの取得
  VPN_PASSWORD="$(security find-generic-password -s "$VPN_PASSWORD_KEYNAME" -w)"
  VPN_TOKEN="$(oathtool --totp --base32 "$(security find-generic-password -s "$VPN_TOTP_SECRET_KEYNAME" -w)")"
  export VPN_PASSWORD
  export VPN_TOKEN

  # 接続
  expect -c '
    set log_user 0
    set timeout 5

    spawn vpn connect $env(VPN_HOST)

    expect "Group:"
    send "$env(VPN_GROUP)\r"
    expect "Username:"
    send "$env(VPN_USERNAME)\r"
    expect "Password:"
    send "$env(VPN_PASSWORD)\r"
    expect "Second Username:"
    send "$env(VPN_SECOND_USERNAME)\r"
    expect "Second Password:"
    send "$env(VPN_TOKEN)\r"

    interact
  '

  # GUI 版を起動
  open '/Applications/Cisco/Cisco AnyConnect Secure Mobility Client.app'
)

## autojump
[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh

## docker fzf
export FZF_COMPLETION_TRIGGER=','

## nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

## Cargo compete系
alias atc="cargo compete"

## Kaggle用の関数
kpython(){ docker run -v $PWD:/tmp/working -w=/tmp/working --rm -it gcr.io/kaggle-images/python python "$@" }
ikpython() { docker run -v $PWD:/tmp/working -w=/tmp/working --rm -it gcr.io/kaggle-images/python ipython }
# kjupyter() { (sleep 3 && open "http://localhost:8888")& docker run -v $PWD:/tmp/working -w=/tmp/working -p 8888:8888 --rm -it gcr.io/kaggle-images/python jupyter notebook --no-browser --notebook-dir=/tmp/working }

## flutter
export PATH="$PATH:/usr/local/flutter/bin"

## チーム開発
# export GOOGLE_APPLICATION_CREDENTIALS=/Users/MIZUNO-HIROAKI/.secrets/be-inoue-yusuke-firebase-adminsdk-rzztl-d098be0876.json
export GOOGLE_APPLICATION_CREDENTIALS=/Users/MIZUNO-HIROAKI/.gcp/credentials/credentials.json


## phpbrew
source /Users/MIZUNO-HIROAKI/.phpbrew/bashrc

## golang
export PATH="$PATH:/Users/MIZUNO-HIROAKI/go/bin"

## lazygit
alias lg='lazygit'

# Fig post block. Keep at the bottom of this file.
[[ -f "$HOME/.fig/shell/zshrc.post.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.post.zsh"
